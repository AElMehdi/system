name: CI

on: [push, pull_request]

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-go@v1
      with:
        go-version: '1.13'
    - name: Install kubebuilder
      run: |
        # from https://book.kubebuilder.io/quick-start.html#installation
        os=`go env GOOS`
        arch=`go env GOARCH`

        # download kubebuilder and extract it to tmp
        curl -sL https://go.kubebuilder.io/dl/2.0.0/${os}/${arch} | tar -xz -C /tmp/

        # move to a long-term location and put it on your path
        # (you'll need to set the KUBEBUILDER_ASSETS env var if you put it somewhere else)
        sudo mv /tmp/kubebuilder_2.0.0_${os}_${arch} /usr/local/kubebuilder
        echo "##[add-path]/usr/local/kubebuilder/bin"
    - name: Install kustomize
      run: |
        opsys=`go env GOOS`
        curl -s https://api.github.com/repos/kubernetes-sigs/kustomize/releases/latest |\
          grep browser_download |\
          grep $opsys |\
          cut -d '"' -f 4 |\
          xargs curl -O -L
        mv kustomize_*_${opsys}_amd64 kustomize
        chmod u+x kustomize
        sudo mv kustomize /usr/local/bin/
    - name: Build & Test
      run: make compile test
    - name: Check generated code is up to date
      run: git diff --exit-code .
    - name: Report coverage
      run: bash <(curl -s https://codecov.io/bash)
      env:
        CODECOV_TOKEN: 39b82cdd-7ed3-4692-b2ea-f31ed9b84cef

  stage:
    needs: test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-go@v1
        with:
          go-version: '1.13'
      - name: Install kubebuilder
        run: |
          # from https://book.kubebuilder.io/quick-start.html#installation
          os=`go env GOOS`
          arch=`go env GOARCH`

          # download kubebuilder and extract it to tmp
          curl -sL https://go.kubebuilder.io/dl/2.0.0/${os}/${arch} | tar -xz -C /tmp/

          # move to a long-term location and put it on your path
          # (you'll need to set the KUBEBUILDER_ASSETS env var if you put it somewhere else)
          sudo mv /tmp/kubebuilder_2.0.0_${os}_${arch} /usr/local/kubebuilder
          echo "##[add-path]/usr/local/kubebuilder/bin"
      - name: Install kustomize
        run: |
          opsys=`go env GOOS`
          curl -s https://api.github.com/repos/kubernetes-sigs/kustomize/releases/latest |\
            grep browser_download |\
            grep $opsys |\
            cut -d '"' -f 4 |\
            xargs curl -O -L
          mv kustomize_*_${opsys}_amd64 kustomize
          chmod u+x kustomize
          sudo mv kustomize /usr/local/bin/
      - name: Install ko
        run: |
          go get github.com/google/ko/cmd/ko
          echo "##[add-path]$(go env GOPATH)/bin"
        env:
          GO111MODULE: "off"
      - name: gcloud auth
        run: |
          gcloud config set project cf-spring-pfs-eng
          gcloud config set compute/region us-central1
          gcloud config set compute/zone us-central1-a
          gcloud config set disable_prompts True
          gcloud auth activate-service-account --key-file <(echo $GCLOUD_CLIENT_SECRET)
          gcloud auth configure-docker
        env:
          GCLOUD_CLIENT_SECRET: ${{ secrets.GCLOUD_CLIENT_SECRET }}
      - name: Stage artifacts
        run: .github/workflows/stage.sh
        env:
          KO_DOCKER_REPO: gcr.io/projectriff/system

  fats:
    needs: stage
    if: github.event_name == 'push'
    strategy:
      matrix:
        runtime:
        - core
        - knative
        # - streaming # TODO add acceptances tests
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: 'Setup env'
        run: |
          echo "##[set-env name=CLUSTER]minikube"
          echo "##[set-env name=REGISTRY]docker-daemon"
          echo "##[set-env name=RUNTIME]${{ matrix.runtime }}"
          echo "##[set-env name=CLUSTER_NAME]system-id-${{ matrix.runtime }}"
          echo "##[set-env name=NAMESPACE]system-id-${{ matrix.runtime }}"
          echo "##[set-env name=FATS_DIR]fats"
          echo "##[set-env name=FATS_REPO]projectriff/fats"
          echo "##[set-env name=FATS_REFSPEC]963813cd508045459d9f48e664a56b553a322a85" # master as of 2019-09-19
      - name: 'Fetch FATS'
        run: .github/workflows/fats-fetch.sh ${FATS_DIR} ${FATS_REFSPEC} ${FATS_REPO}
      - name: 'Install tools'
        run: |
          ${FATS_DIR}/install.sh kubectl
          ${FATS_DIR}/install.sh riff
          ${FATS_DIR}/install.sh ytt 0.20.0
      - name: 'Start FATS'
        run: ${FATS_DIR}/start.sh
      - name: 'Install runtime'
        run: .github/workflows/install-runtime.sh
      - name: 'Run tests'
        run: .github/workflows/run-tests.sh
      - name: 'Collect diagnostics'
        run: |
          kubectl get deployments,services,pods --all-namespaces || true
          echo ""
          echo "RIFF:"
          echo ""
          kubectl get riff --all-namespaces || true
          echo ""
          echo "KNATIVE:"
          echo ""
          kubectl get knative --all-namespaces || true
          echo ""
          echo "FAILING PODS:"
          echo ""
          kubectl get pods --all-namespaces --field-selector=status.phase!=Running \
            | tail -n +2 | awk '{print "-n", $1, $2}' | xargs -L 1 kubectl describe pod || true
          echo ""
          echo "NODE:"
          echo ""
          kubectl describe node || true
          echo ""
          echo "RIFF:"
          echo ""
          kubectl describe riff --all-namespaces || true
        if: failure()
      - name: 'Dump riff Build logs'
        run: kubectl logs -n riff-system -l component=build.projectriff.io,control-plane=controller-manager -c manager --tail 10000 || true
        if: failure()
      - name: 'Dump riff Core Runtime logs'
        run: kubectl logs -n riff-system -l component=core.projectriff.io,control-plane=controller-manager -c manager --tail 10000 || true
        if: failure()
      - name: 'Dump riff Knative Runtime logs'
        run: kubectl logs -n riff-system -l component=knative.projectriff.io,control-plane=controller-manager -c manager --tail 10000 || true
        if: failure()
      - name: 'Dump riff Streaming Runtime logs'
        run: kubectl logs -n riff-system -l component=streaming.projectriff.io,control-plane=controller-manager -c manager --tail 10000 || true
        if: failure()
      - name: 'Dump Knative Build logs'
        run: kubectl logs -n knative-build -l app=build-controller --tail 10000 || true
        if: failure()
      - name: 'Dump Knative Serving logs'
        run: kubectl logs -n knative-serving -l app=controller --tail 10000 || true
        if: failure()
      - name: 'Uninstall runtime'
        run: .github/workflows/cleanup-runtime.sh
        if: always()
      - name: 'Cleanup FATS'
        run: ${FATS_DIR}/cleanup.sh
        if: always()

  publish:
    needs: fats
    if: github.ref == 'refs/heads/master' || ( startsWith(github.ref, 'refs/heads/v') && endsWith(github.ref, 'x') )
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: gcloud auth
        run: |
          gcloud config set disable_prompts True
          gcloud auth activate-service-account --key-file <(echo $GCLOUD_CLIENT_SECRET)
        env:
          GCLOUD_CLIENT_SECRET: ${{ secrets.GCLOUD_CLIENT_SECRET }}
      - name: Publish artifacts
        run: .github/workflows/publish.sh ${{ github.ref }}
