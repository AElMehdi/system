// +build !ignore_autogenerated

/*
 * Copyright 2019 The original author or authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file was autogenerated by deepcopy-gen. Do not edit it manually!

package v1alpha1

import (
	duck_v1alpha1 "github.com/knative/pkg/apis/duck/v1alpha1"
	build_v1alpha1 "github.com/projectriff/system/pkg/apis/build/v1alpha1"
	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Build) DeepCopyInto(out *Build) {
	*out = *in
	if in.Application != nil {
		in, out := &in.Application, &out.Application
		if *in == nil {
			*out = nil
		} else {
			*out = new(build_v1alpha1.ApplicationSpec)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Function != nil {
		in, out := &in.Function, &out.Function
		if *in == nil {
			*out = nil
		} else {
			*out = new(build_v1alpha1.FunctionSpec)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Build.
func (in *Build) DeepCopy() *Build {
	if in == nil {
		return nil
	}
	out := new(Build)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RequestProcessor) DeepCopyInto(out *RequestProcessor) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	if in.Spec != nil {
		in, out := &in.Spec, &out.Spec
		*out = make(RequestProcessorSpec, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RequestProcessor.
func (in *RequestProcessor) DeepCopy() *RequestProcessor {
	if in == nil {
		return nil
	}
	out := new(RequestProcessor)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RequestProcessor) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RequestProcessorList) DeepCopyInto(out *RequestProcessorList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RequestProcessor, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RequestProcessorList.
func (in *RequestProcessorList) DeepCopy() *RequestProcessorList {
	if in == nil {
		return nil
	}
	out := new(RequestProcessorList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RequestProcessorList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RequestProcessorSpecItem) DeepCopyInto(out *RequestProcessorSpecItem) {
	*out = *in
	if in.Percent != nil {
		in, out := &in.Percent, &out.Percent
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Build != nil {
		in, out := &in.Build, &out.Build
		if *in == nil {
			*out = nil
		} else {
			*out = new(Build)
			(*in).DeepCopyInto(*out)
		}
	}
	in.PodSpec.DeepCopyInto(&out.PodSpec)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RequestProcessorSpecItem.
func (in *RequestProcessorSpecItem) DeepCopy() *RequestProcessorSpecItem {
	if in == nil {
		return nil
	}
	out := new(RequestProcessorSpecItem)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RequestProcessorStatus) DeepCopyInto(out *RequestProcessorStatus) {
	*out = *in
	in.Status.DeepCopyInto(&out.Status)
	if in.Builds != nil {
		in, out := &in.Builds, &out.Builds
		*out = make([]*v1.ObjectReference, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(v1.ObjectReference)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	if in.ConfigurationNames != nil {
		in, out := &in.ConfigurationNames, &out.ConfigurationNames
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Address != nil {
		in, out := &in.Address, &out.Address
		if *in == nil {
			*out = nil
		} else {
			*out = new(duck_v1alpha1.Addressable)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RequestProcessorStatus.
func (in *RequestProcessorStatus) DeepCopy() *RequestProcessorStatus {
	if in == nil {
		return nil
	}
	out := new(RequestProcessorStatus)
	in.DeepCopyInto(out)
	return out
}
