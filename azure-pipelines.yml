# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- task: GoTool@0
  inputs:
    version: '1.12.3'

- script: |
    mkdir -p '$(GOPATH)/bin'
    echo '##vso[task.prependpath]$(GOPATH)/bin'

    mkdir -p '$(modulePath)'
    shopt -s extglob
    shopt -s dotglob
    mv !(gopath) '$(modulePath)'

    go version
  displayName: 'Set up the Go workspace'

- script: |
    curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
    ./hack/verify-codegen.sh
  workingDirectory: '$(modulePath)'
  displayName: 'Verify dependencies and generated code'

- script: |
    go get github.com/google/ko/cmd/ko
    ko resolve -L -f config/ > /dev/null
  workingDirectory: '$(modulePath)'
  displayName: 'Build commands'

- script: go test -v --race -coverprofile=coverage.txt -covermode=atomic ./...
  workingDirectory: '$(modulePath)'
  displayName: 'Run unit test'

- bash: bash <(curl -s https://codecov.io/bash)
  workingDirectory: '$(modulePath)'
  displayName: 'Report coverage'

- script: |
    set -o errexit
    set -o nounset
    set -o pipefail

    # from https://cloud.google.com/sdk/docs/downloads-apt-get
    export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
    echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    sudo apt-get update && sudo apt-get install google-cloud-sdk

    gcloud config set disable_prompts True
    gcloud auth activate-service-account --key-file <(echo ${GCLOUD_CLIENT_SECRET} | base64 --decode)
    gcloud auth configure-docker 

    source ./hack/release.sh $(Build.SourceBranch)
  env:
    GCLOUD_CLIENT_SECRET: '$(GcloudClientSecret)'
  workingDirectory: '$(modulePath)'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: 'Publish riff System'
